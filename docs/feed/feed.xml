<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Ryan Cavanaugh</title>
	<subtitle>Ryan Cavanaugh&#39;s blog</subtitle>
	
	<link href="https://searyanc.dev/feed/feed.xml" rel="self"/>
	<link href="https://searyanc.dev/"/>
	<updated>2023-05-28T00:00:00Z</updated>
	<id>https://searyanc.dev/</id>
	<author>
		<name>Ryan Cavanaugh</name>
		<email></email>
	</author>
	
	<entry>
		<title>How I use ChatGPT as Accessibility Software</title>
		<link href="https://searyanc.dev/llm-accessibility/"/>
		<updated>2023-05-28T00:00:00Z</updated>
		<id>https://searyanc.dev/llm-accessibility/</id>
		<content type="html">&lt;p&gt;In April 2023 I crashed my bicycle and broke both my wrists.
As you can imagine, this put quite the damper on my ability to type.
Since my brain and mouth were still in working order, I figured that I could use speech-to-text to do most of my job, since as a dev manager, most of my time is spent either in meetings, or writing text related to my job&lt;/p&gt;
&lt;p&gt;The built-in speech-to-text functionality in Windows 11 is &lt;em&gt;quite&lt;/em&gt; good in terms of everyday transcription.
It&#39;s as good as the one built into my Android phone, to be sure, and for a lot of content like the performance reviews I was writing at the time, this was good enough as-is with some light copy editing.&lt;/p&gt;
&lt;p&gt;However, for technical content, this left a lot to be desired.
A lot of clarity is gained with simple formatting, like putting programming terms in &lt;code&gt;fixed-width&lt;/code&gt; font.
For talking about TypeScript in particular, there are a lot of things that are homophonic with other more common terms, such as &lt;code&gt;variants&lt;/code&gt; vs &lt;code&gt;variance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also didn&#39;t like how the default speech-to-text dealt with punctuation.
I write a &lt;em&gt;lot&lt;/em&gt; of text every day, and my writing style is something that I feel is part of my identity.
Seeing comments with my name attached to them, not written in my writing style, was surprisingly upsetting.
It felt like a doppleganger wrote my content.&lt;/p&gt;
&lt;p&gt;What I needed was for someone, or some thing, with the extra context of &lt;em&gt;what I was doing&lt;/em&gt; to in order to reformat and copyedit my text exactly to my liking.&lt;/p&gt;
&lt;p&gt;I fired up ChatGPT and gave it the scenario. After repeated tweaking, I came up with this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scenario: I am a maintainer on the TypeScript GitHub repo.&lt;/p&gt;
&lt;p&gt;I have dictated a message so its punctuation, formatting, and use of homophones may be off. Please correct the text for typographical errors and apply markdown formatting to relevant terms, such as names of variables, methods functions, or types.&lt;/p&gt;
&lt;p&gt;Do not add any extra content, preamble, or sign off, but do make corrections in cases where there is a homophone of a more common programming term in use, such as &amp;quot;to Jason&amp;quot; meaning &amp;quot;toJSON&amp;quot; in the context of JavaScript programming, or TypeScript related terms.&lt;/p&gt;
&lt;p&gt;Also apply in-situ corrections such as &amp;quot;capital t type&amp;quot; to &amp;quot;Type&amp;quot;. Always replace &amp;quot;comma&amp;quot; with a comma character, &amp;quot;colon&amp;quot; with an actual colon, &amp;quot;dash&amp;quot; with an actual dash, and so on.&lt;/p&gt;
&lt;p&gt;Add commas liberally if it makes the text flow better, as these are unlikely to be specified in the transcription. Be sure to correct other mistakes like your/you&#39;re errors. The message follows below the line. Reply only with the corrected message.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The results of this are &lt;em&gt;incredibly&lt;/em&gt; good.&lt;/p&gt;
&lt;p&gt;Here&#39;s an example input produced from dictation. Errors or subpar results are &lt;strong&gt;annotated&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This doesn&#39;t seem like a great &lt;strong&gt;trade off&lt;/strong&gt; in general. &lt;strong&gt;downcasting&lt;/strong&gt; to &lt;strong&gt;stringer number&lt;/strong&gt; is useful because those types are known to have particular characteristics, but downcasting to &lt;strong&gt;object&lt;/strong&gt; just leaves you worse off.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ChatGPT transformed this to exactly what I wanted:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This doesn&#39;t seem like a great trade-off in general. Downcasting to &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; is useful because those types are known to have particular characteristics, but downcasting to &lt;code&gt;object&lt;/code&gt; just leaves you worse off than you were before in the vast majority of cases without providing any additional type safety.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wrote a C# program to grab the active text from the current textbox using the Windows Accessibility API, pass the prewritten prompt + that text into the &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; API, and push the result back into the textbox.
Then I wired up that invocation to a button on my Stream Deck&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://searyanc.dev/img/stream-deck-gpt.jpg&quot; alt=&quot;&amp;quot;copyedit&amp;quot; caption on a Stream Deck button with a debugger icon&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The cost to do this is effectively free.
At a cost of $0.002 / 1,000 tokens, and a typical cost to reformat one comment of about 200 tokens, $1 can copy-edit 2,500 comments.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>scadr: renders multi-part OpenSCAD files</title>
		<link href="https://searyanc.dev/posts/scadr/"/>
		<updated>2023-05-27T00:00:00Z</updated>
		<id>https://searyanc.dev/posts/scadr/</id>
		<content type="html">&lt;p&gt;This solves a few very annoying problems:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an OpenSCAD file that produces multiple parts, how do I get an &lt;code&gt;.stl&lt;/code&gt; file for each of them?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I easily make an OpenSCAD file that renders in low resolution in preview, but high resolution in output?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This solution doesn&#39;t require any awkward makefiles or other scripts and can just use a module naming convention. I like it.&lt;/p&gt;
&lt;p&gt;Now live at &lt;a href=&quot;https://github.com/SeaRyanC/scadr#readme&quot;&gt;https://github.com/SeaRyanC/scadr#readme&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Final Fantasy Victory G-code</title>
		<link href="https://searyanc.dev/victory-g-code/"/>
		<updated>2023-05-27T00:00:00Z</updated>
		<id>https://searyanc.dev/victory-g-code/</id>
		<content type="html">&lt;p&gt;Almost every 3D printer supports monophonic beeps. You can use this to have it play a little tune when your print is done. Of course, the best song you can play is the opening riff from the &lt;a href=&quot;https://www.youtube.com/watch?v=PZ_7ipJ6Cx8&quot;&gt;Final Fantasy victory fanfare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Cura, go here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preferences&lt;/li&gt;
&lt;li&gt;Printers&lt;/li&gt;
&lt;li&gt;(Your printer)&lt;/li&gt;
&lt;li&gt;Machine Settings&lt;/li&gt;
&lt;li&gt;End G-code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and append these commands to the bottom:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;M300 P68 S156
M300 P63 S196
M300 P68 S233
M300 P68 S156
M300 P68 S196
M300 P68 S233
M300 P63 S311
M300 P68 S392
M300 P68 S466
M300 P68 S622
M300 P68 S784
M300 P63 S932
M300 P135 S1245
M300 P135 S1245
M300 P130 S1245
M300 P401 S1245
M300 P401 S988
M300 P401 S1109
M300 P266 S1245
M300 P130 S1109
M300 P1203 S1245
G04 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used &lt;a href=&quot;https://alexyu132.github.io/midi-m300/&quot;&gt;this converter&lt;/a&gt; with &lt;a href=&quot;https://thefinalfantasy.net/ff1/music-midi.html&quot;&gt;this MIDI file&lt;/a&gt;. The &lt;code&gt;G04 10&lt;/code&gt; (10ms delay) at the end prevents the speaker from glitching out during the last held note.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>firaga.io: planner for pixel-based arts and crafts</title>
		<link href="https://searyanc.dev/firaga-io/"/>
		<updated>2023-05-22T00:00:00Z</updated>
		<id>https://searyanc.dev/firaga-io/</id>
		<content type="html">&lt;p&gt;Check it out at &lt;a href=&quot;https://firaga.io/&quot;&gt;https://firaga.io/&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
